package com.libraryManagement.APIGateway.Security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@Configuration
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
	
	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder authenticationMgr) throws Exception {
		authenticationMgr.inMemoryAuthentication()
			.withUser("jduser").password("{noop}jdu@123").authorities("ROLE_USER")
			.and()
			.withUser("jdadmin").password("{noop}jda@123").authorities("ROLE_USER","ROLE_ADMIN");
	}
	
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests()
		.antMatchers("/", "/home").permitAll()
		.antMatchers("/homePage").access("hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')")
		.antMatchers("/userPage").access("hasRole('ROLE_USER')")
		.antMatchers("/LibrarianService").access("hasRole('ROLE_ADMIN')")
		.anyRequest().authenticated()
		.and()
		.formLogin()/*.loginPage("/login") custom login page*/.permitAll()
		.and()
		.logout().permitAll();
	}
}
