package com.libarayManagement.Librarian.Exception;

import java.sql.SQLException;

import org.springframework.dao.DataAccessException;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

import io.reactivex.netty.protocol.http.server.HttpServerRequest;

@EnableWebMvc
@ControllerAdvice
public class GlobalExceptionHandler<T> {

	@ExceptionHandler(value = { CustomRunTimeException.class })
	public ResponseEntity<Object> handleCustomException(RuntimeException ex, HttpServerRequest<T> request){
		return new ResponseEntity<Object>(ex.getMessage(), new HttpHeaders(), HttpStatus.NOT_FOUND);
	}
	
	@ExceptionHandler(value = { NoContentException.class })
	public ResponseEntity<Object> handleInvalidContent(RuntimeException ex, HttpServerRequest<T> request){
		return new ResponseEntity<Object>(ex.getMessage(), new HttpHeaders(), HttpStatus.NO_CONTENT);
	}
	
	@ExceptionHandler({DataIntegrityViolationException.class})
    public ResponseEntity<Object> handleConflict(RuntimeException ex, HttpServerRequest<T> request) {
		return new ResponseEntity<Object>(ex.getMessage(), new HttpHeaders(), HttpStatus.CONFLICT);
    }
	
	@ExceptionHandler({SQLException.class, DataAccessException.class})
    public ResponseEntity<Object> databaseError(RuntimeException ex, HttpServerRequest<T> request) {
		return new ResponseEntity<Object>(ex.getMessage(), new HttpHeaders(), HttpStatus.FORBIDDEN);
    }
	
	@ExceptionHandler(value = { RuntimeException.class })
	public ResponseEntity<Object> handleAllException(RuntimeException ex, HttpServerRequest<T> request){
		return new ResponseEntity<Object>(ex.getMessage(), new HttpHeaders(), HttpStatus.FORBIDDEN);
	}
}
