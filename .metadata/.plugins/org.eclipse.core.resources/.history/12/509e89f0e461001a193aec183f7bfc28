package com.libraryManagement.Student.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.libraryManagement.Student.Exception.CustomRunTimeException;
import com.libraryManagement.Student.Exception.NoContentException;
import com.libraryManagement.Student.Model.ControllerInputOutput;
import com.libraryManagement.Student.Model.Student;
import com.libraryManagement.Student.Service.IStudentService;

@RestController
@RequestMapping("/api/v1")
public class StudentController {
	
	@Autowired
	IStudentService StudentService;	
	
	@GetMapping("/Student")
	public ResponseEntity<ControllerInputOutput> getAllStudents() {
		
		List<Student> allStudents = StudentService.getAllStudents();
		
		if(allStudents == null || allStudents.isEmpty()) {
			throw new CustomRunTimeException("No Resource found");
		}
		
		ControllerInputOutput output = new ControllerInputOutput.ControllerBuilder()
				.studentList(allStudents)
				.build();
		
		return new ResponseEntity<ControllerInputOutput>(output, HttpStatus.OK);
	}
	
	@GetMapping("/Student/{id}")
	public ResponseEntity<Student> getStudent(@PathVariable Integer id) {
		
		if(id == null) {
			throw new NoContentException("Invalid Input");
		}
		
		Student Student = StudentService.getStudent(id);

		return new ResponseEntity<>(Student, HttpStatus.OK);
	}
	
	@PostMapping("/Student")
	public ResponseEntity<String> addStudent(@RequestBody Student Student) {
		
		Student = StudentService.addStudent(Student);
		
		if(Student.getId() != null) {
			return new ResponseEntity<>(HttpStatus.CREATED);
		}
		
		return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	}
	
	@DeleteMapping("/Student/{id}")
	public ResponseEntity<String> addStudent(@PathVariable Integer id) {
		
		StudentService.deleteStudent(id);
		
		return new ResponseEntity<String>(HttpStatus.OK);
	}

}
