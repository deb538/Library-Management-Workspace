package com.libraryManagement.Student.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.libraryManagement.Student.Exception.CustomRunTimeException;
import com.libraryManagement.Student.Exception.NoContentException;
import com.libraryManagement.Student.Model.Book;
import com.libraryManagement.Student.Model.ControllerInputOutput;
import com.libraryManagement.Student.Service.BookService;

@RestController
@RequestMapping("/api/v1")
public class BooksController {
	
	@Autowired
	BookService bookService;	
	
	@GetMapping("/Book")
	public ResponseEntity<ControllerInputOutput> getAllBooks() {
		
		List<Book> allBooks = bookService.getAllBooks();
		
		if(allBooks == null || allBooks.isEmpty()) {
			throw new CustomRunTimeException("No Resource found");
		}
		
		ControllerInputOutput output = new ControllerInputOutput.ControllerBuilder()
				.bookList(allBooks)
				.build();
		
		return new ResponseEntity<ControllerInputOutput>(output, HttpStatus.OK);
	}
	
	@GetMapping("/Book/{id}")
	public ResponseEntity<Book> getBook(@PathVariable Integer id) {
		
		if(id == null) {
			throw new NoContentException("Invalid Input");
		}
		
		Book Book = bookService.getBook(id);

		return new ResponseEntity<>(Book, HttpStatus.OK);
	}
	
	@PostMapping("/Book")
	public ResponseEntity<String> addBook(@RequestBody Book Book) {
		
		/*List<Book> allBooks = bookService.getBookByEmployeeNumber(Book);
		
		if(allBooks != null && !allBooks.isEmpty()) {
			return new ResponseEntity<>(HttpStatus.CONFLICT);
		}*/
		
		Book = bookService.addBook(Book);
		
		if(Book.getId() != null) {
			return new ResponseEntity<>(HttpStatus.CREATED);
		}
		
		return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	}
	
	@DeleteMapping("/Book/{id}")
	public ResponseEntity<String> addBook(@PathVariable Integer id) {
		
		bookService.deleteBook(id);
		
		return new ResponseEntity<String>(HttpStatus.OK);
	}

}
